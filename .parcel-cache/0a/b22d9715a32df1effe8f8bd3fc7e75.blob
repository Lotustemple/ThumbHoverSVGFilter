var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "Cursor", function () {
  return Cursor;
});
var _gsap = require('gsap');
var _utils = require('./utils');
// Track the mouse position
let mouse = {
  x: 0,
  y: 0
};
window.addEventListener('mousemove', ev => mouse = _utils.getMousePos(ev));
class Cursor {
  constructor(el) {
    this.DOM = {
      el: el
    };
    this.DOM.el.style.opacity = 0;
    this.bounds = this.DOM.el.getBoundingClientRect();
    this.renderedStyles = {
      tx: {
        previous: 0,
        current: 0,
        amt: 0.15
      },
      ty: {
        previous: 0,
        current: 0,
        amt: 0.15
      },
      scale: {
        previous: 1,
        current: 1,
        amt: 0.15
      },
      opacity: {
        previous: 1,
        current: 1,
        amt: 0.1
      }
    };
    this.onMouseMoveEv = () => {
      this.renderedStyles.tx.previous = this.renderedStyles.tx.current = mouse.x - this.bounds.width / 2;
      this.renderedStyles.ty.previous = this.renderedStyles.ty.previous = mouse.y - this.bounds.height / 2;
      _gsap.gsap.to(this.DOM.el, {
        duration: 0.9,
        ease: 'Power3.easeOut',
        opacity: 1
      });
      requestAnimationFrame(() => this.render());
      window.removeEventListener('mousemove', this.onMouseMoveEv);
    };
    window.addEventListener('mousemove', this.onMouseMoveEv);
  }
  enter() {
    this.renderedStyles['scale'].current = 1.8;
    this.renderedStyles['opacity'].current = 0.8;
  }
  leave() {
    this.renderedStyles['scale'].current = 1;
    this.renderedStyles['opacity'].current = 1;
  }
  render() {
    this.renderedStyles['tx'].current = mouse.x - this.bounds.width / 2;
    this.renderedStyles['ty'].current = mouse.y - this.bounds.height / 2;
    for (const key in this.renderedStyles) {
      this.renderedStyles[key].previous = _utils.lerp(this.renderedStyles[key].previous, this.renderedStyles[key].current, this.renderedStyles[key].amt);
    }
    this.DOM.el.style.transform = `translateX(${this.renderedStyles['tx'].previous}px) translateY(${this.renderedStyles['ty'].previous}px) scale(${this.renderedStyles['scale'].previous})`;
    this.DOM.el.style.opacity = this.renderedStyles['opacity'].previous;
    requestAnimationFrame(() => this.render());
  }
}
